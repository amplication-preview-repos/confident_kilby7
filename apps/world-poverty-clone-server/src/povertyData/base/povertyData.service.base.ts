/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PovertyData as PrismaPovertyData,
  Region as PrismaRegion,
} from "@prisma/client";

export class PovertyDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PovertyDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.povertyData.count(args);
  }

  async povertyDataItems<T extends Prisma.PovertyDataFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PovertyDataFindManyArgs>
  ): Promise<PrismaPovertyData[]> {
    return this.prisma.povertyData.findMany<Prisma.PovertyDataFindManyArgs>(
      args
    );
  }
  async povertyData<T extends Prisma.PovertyDataFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PovertyDataFindUniqueArgs>
  ): Promise<PrismaPovertyData | null> {
    return this.prisma.povertyData.findUnique(args);
  }
  async createPovertyData<T extends Prisma.PovertyDataCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PovertyDataCreateArgs>
  ): Promise<PrismaPovertyData> {
    return this.prisma.povertyData.create<T>(args);
  }
  async updatePovertyData<T extends Prisma.PovertyDataUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PovertyDataUpdateArgs>
  ): Promise<PrismaPovertyData> {
    return this.prisma.povertyData.update<T>(args);
  }
  async deletePovertyData<T extends Prisma.PovertyDataDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PovertyDataDeleteArgs>
  ): Promise<PrismaPovertyData> {
    return this.prisma.povertyData.delete(args);
  }

  async getRegion(parentId: string): Promise<PrismaRegion | null> {
    return this.prisma.povertyData
      .findUnique({
        where: { id: parentId },
      })
      .region();
  }
}
