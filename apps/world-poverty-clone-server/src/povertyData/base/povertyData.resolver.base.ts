/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PovertyData } from "./PovertyData";
import { PovertyDataCountArgs } from "./PovertyDataCountArgs";
import { PovertyDataFindManyArgs } from "./PovertyDataFindManyArgs";
import { PovertyDataFindUniqueArgs } from "./PovertyDataFindUniqueArgs";
import { CreatePovertyDataArgs } from "./CreatePovertyDataArgs";
import { UpdatePovertyDataArgs } from "./UpdatePovertyDataArgs";
import { DeletePovertyDataArgs } from "./DeletePovertyDataArgs";
import { Region } from "../../region/base/Region";
import { PovertyDataService } from "../povertyData.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PovertyData)
export class PovertyDataResolverBase {
  constructor(
    protected readonly service: PovertyDataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PovertyData",
    action: "read",
    possession: "any",
  })
  async _povertyDataItemsMeta(
    @graphql.Args() args: PovertyDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PovertyData])
  @nestAccessControl.UseRoles({
    resource: "PovertyData",
    action: "read",
    possession: "any",
  })
  async povertyDataItems(
    @graphql.Args() args: PovertyDataFindManyArgs
  ): Promise<PovertyData[]> {
    return this.service.povertyDataItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PovertyData, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PovertyData",
    action: "read",
    possession: "own",
  })
  async povertyData(
    @graphql.Args() args: PovertyDataFindUniqueArgs
  ): Promise<PovertyData | null> {
    const result = await this.service.povertyData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PovertyData)
  @nestAccessControl.UseRoles({
    resource: "PovertyData",
    action: "create",
    possession: "any",
  })
  async createPovertyData(
    @graphql.Args() args: CreatePovertyDataArgs
  ): Promise<PovertyData> {
    return await this.service.createPovertyData({
      ...args,
      data: {
        ...args.data,

        region: args.data.region
          ? {
              connect: args.data.region,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PovertyData)
  @nestAccessControl.UseRoles({
    resource: "PovertyData",
    action: "update",
    possession: "any",
  })
  async updatePovertyData(
    @graphql.Args() args: UpdatePovertyDataArgs
  ): Promise<PovertyData | null> {
    try {
      return await this.service.updatePovertyData({
        ...args,
        data: {
          ...args.data,

          region: args.data.region
            ? {
                connect: args.data.region,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PovertyData)
  @nestAccessControl.UseRoles({
    resource: "PovertyData",
    action: "delete",
    possession: "any",
  })
  async deletePovertyData(
    @graphql.Args() args: DeletePovertyDataArgs
  ): Promise<PovertyData | null> {
    try {
      return await this.service.deletePovertyData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Region, {
    nullable: true,
    name: "region",
  })
  @nestAccessControl.UseRoles({
    resource: "Region",
    action: "read",
    possession: "any",
  })
  async getRegion(
    @graphql.Parent() parent: PovertyData
  ): Promise<Region | null> {
    const result = await this.service.getRegion(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
